{"version":3,"sources":["webpack:///www/bundle.min.js","webpack:///webpack/bootstrap 64a121ca6940d2963b54","webpack:///./src/main.js","webpack:///./src/conf.js","webpack:///./src/generators/map.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","init","render","cube","rotation","x","y","cube2","requestAnimationFrame","renderer","scene","camera","THREE","Scene","HEIGHT","window","innerHeight","WIDTH","innerWidth","aspectRatio","PerspectiveCamera","fieldOfView","nearPlane","farPlane","position","z","WebGLRenderer","antialias","precision","setClearColor","setSize","shadowMap","enabled","document","body","appendChild","domElement","geometry","BoxGeometry","material","MeshPhongMaterial","color","specular","shininess","Mesh","add","material2","map","ImageUtils","loadTexture","directionalLight","DirectionalLight","set","addEventListener","onWindowResize","controls","OrbitControls","aspect","updateProjectionMatrix","mapGenerator","console","log","folders","textures","sizeX","sizeY","blockedProb","Error","gmap","housePos","Math","round","random","aux","push","spawnPos"],"mappings":"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","file":"./www/bundle.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar conf = __webpack_require__(2);\r\n\tvar mapGenerator = __webpack_require__(3);\r\n\t\r\n\tconsole.log(mapGenerator()); \r\n\t\r\n\t//THREEJS RELATED VARIABLES \r\n\tvar scene; \r\n\tvar camera;\r\n\tvar fieldOfView = 75;\r\n\tvar aspectRatio;\r\n\tvar nearPlane = 1;\r\n\tvar farPlane = 2000;\r\n\tvar renderer;\r\n\t\r\n\t//SCREEN VARIABLES\r\n\tvar HEIGHT;\r\n\tvar WIDTH;\r\n\t\r\n\t//INIT THREE JS AND SCREEN\r\n\tfunction init(){\r\n\t\tscene = new THREE.Scene();\r\n\t\t\r\n\t\tHEIGHT = window.innerHeight;\r\n\t\tWIDTH = window.innerWidth;\r\n\t\taspectRatio = WIDTH / HEIGHT;\r\n\t\r\n\t\tcamera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\r\n\t\tcamera.position.z = 5;\r\n\t\t\r\n\t\trenderer = new THREE.WebGLRenderer({\r\n\t\t\tantialias: true,\r\n\t\t\tprecision: \"mediump\"\r\n\t\t});\r\n\t\trenderer.setClearColor( 0xebe5e7, 1 );\r\n\t\trenderer.setSize(WIDTH, HEIGHT);\r\n\t\trenderer.shadowMap.enabled = true;\r\n\t\t\r\n\t\tdocument.body.appendChild(renderer.domElement);\r\n\t\t\r\n\t\t\r\n\t\r\n\t\tvar geometry = new THREE.BoxGeometry(1, 1, 1);\r\n\t\t\r\n\t\tvar material = new THREE.MeshPhongMaterial({\r\n\t\t\tcolor: 0xff3300,\r\n\t\t\tspecular: 0x555555,\r\n\t\t\tshininess: 30\r\n\t\t});\r\n\t\tvar cube = new THREE.Mesh(geometry, material);\r\n\t\tscene.add(cube);\r\n\t\tcube.position.x = 1\r\n\t\r\n\t\tvar material2 = new THREE.MeshPhongMaterial({\r\n\t\t\tmap: THREE.ImageUtils.loadTexture('textures/ground.jpg')\r\n\t\t});\r\n\t\tvar cube2 = new THREE.Mesh(geometry, material2);\r\n\t\tscene.add(cube2);\r\n\t\tcube2.position.x = -1;\r\n\t\r\n\t\tvar directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\r\n\t\tdirectionalLight.position.set(10, 10, 10);\r\n\t\tscene.add(directionalLight);\r\n\t\r\n\t\twindow.addEventListener('resize', onWindowResize, false);\r\n\t\r\n\t\tcontrols = new THREE.OrbitControls(camera, renderer.domElement);\r\n\t\r\n\t\tfunction render() {\r\n\t\t\tcube.rotation.x += 0.05;\r\n\t\t\tcube.rotation.y += 0.03;\r\n\t\t\tcube2.rotation.x += 0.05;\r\n\t\t\tcube2.rotation.y += 0.03;\r\n\t\r\n\t\t\trequestAnimationFrame(render);\r\n\t\t\trenderer.render(scene, camera);\r\n\t\t}\r\n\t\trender();\r\n\t}\r\n\t\r\n\tfunction onWindowResize() {\r\n\t\tHEIGHT = window.innerHeight;\r\n\t\tWIDTH = window.innerWidth;\r\n\t\trenderer.setSize(WIDTH, HEIGHT);\r\n\t\tcamera.aspect = WIDTH / HEIGHT;\r\n\t\tcamera.updateProjectionMatrix();\r\n\t}\r\n\t\r\n\tinit();\r\n\t\r\n\t/*\r\n\tvar scene = new THREE.Scene();\r\n\tvar camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n\tvar renderer = new THREE.WebGLRenderer({\r\n\t\tantialias: true,\r\n\t\tprecision: \"mediump\"\r\n\t});\r\n\t\r\n\tdocument.body.appendChild(renderer.domElement);\r\n\t\r\n\twindow.addEventListener('resize', onWindowResize, false);\r\n\tfunction onWindowResize() {\r\n\t\tHEIGHT = window.innerHeight;\r\n\t\tWIDTH = window.innerWidth;\r\n\t\twindowHalfX = WIDTH / 2;\r\n\t\twindowHalfY = HEIGHT / 2;\r\n\t\trenderer.setSize(WIDTH, HEIGHT);\r\n\t\tcamera.aspect = WIDTH / HEIGHT;\r\n\t\tcamera.updateProjectionMatrix();\r\n\t}\r\n\t\r\n\tvar geometry = new THREE.BoxGeometry(1, 1, 1);\r\n\tvar material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\r\n\tvar cube = new THREE.Mesh(geometry, material);\r\n\tscene.add(cube);\r\n\tcamera.position.z = 5;\r\n\t\r\n\tfunction render() {\r\n\t\tcube.rotation.x += 0.1;\r\n\t\tcube.rotation.y += 0.1;\r\n\t\r\n\t\trequestAnimationFrame(render);\r\n\t\trenderer.render(scene, camera);\r\n\t}\r\n\trender();\r\n\t*/\n\n/***/ },\n/* 1 */,\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\r\n\t\tfolders: {\r\n\t\t\ttextures: \"textures/\"\r\n\t\t}\r\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(sizeX, sizeY, blockedProb){\r\n\t\tsizeX = sizeX || 5;\r\n\t\tsizeY = sizeY || 5;\r\n\t\tblockedProb = blockedProb || .2\r\n\t\tif(sizeX < 0 || sizeY < 0 || blockedProb > .3)\r\n\t\t\tthrow new Error(\"Invalid size for map\");\r\n\t\r\n\t\tvar gmap = [];\r\n\t\r\n\t\t//Generate player zone\r\n\t\tvar housePos = Math.round(Math.random() * (sizeX - 3));\r\n\t\tvar aux = [];\r\n\t\tfor(x = 0; x < sizeX; x++){\r\n\t\t\taux[x] = (x == housePos + 1) ? \"Home\" : \"Imposible\";\r\n\t\t}\r\n\t\tgmap.push(aux);\r\n\t\r\n\t\t//Generate game zone\r\n\t\tfor(y = 0; y < sizeY; y++){\r\n\t\t\tvar aux = [];\r\n\t\t\tfor(x = 0; x < sizeX; x++){\r\n\t\t\t\taux[x] = (Math.random() <= blockedProb) ? \"Obstacle\" : \"Ground\";\r\n\t\t\t}\r\n\t\t\tgmap.push(aux);\r\n\t\t}\r\n\t\r\n\t\t//Generate spawn point\r\n\t\tvar spawnPos = Math.round(Math.random() * (sizeX - 3));\r\n\t\tvar aux = [];\r\n\t\tfor(x = 0; x < sizeX; x++){\r\n\t\t\taux[x] = (x == spawnPos + 1) ? \"Spawn\" : \"Imposible\";\r\n\t\t}\r\n\t\tgmap.push(aux);\r\n\t\r\n\t\treturn gmap;\r\n\t}\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** www/bundle.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 64a121ca6940d2963b54\n **/","var conf = require('./conf.js');\r\nvar mapGenerator = require('./generators/map.js');\r\n\r\nconsole.log(mapGenerator()); \r\n\r\n//THREEJS RELATED VARIABLES \r\nvar scene; \r\nvar camera;\r\nvar fieldOfView = 75;\r\nvar aspectRatio;\r\nvar nearPlane = 1;\r\nvar farPlane = 2000;\r\nvar renderer;\r\n\r\n//SCREEN VARIABLES\r\nvar HEIGHT;\r\nvar WIDTH;\r\n\r\n//INIT THREE JS AND SCREEN\r\nfunction init(){\r\n\tscene = new THREE.Scene();\r\n\t\r\n\tHEIGHT = window.innerHeight;\r\n\tWIDTH = window.innerWidth;\r\n\taspectRatio = WIDTH / HEIGHT;\r\n\r\n\tcamera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\r\n\tcamera.position.z = 5;\r\n\t\r\n\trenderer = new THREE.WebGLRenderer({\r\n\t\tantialias: true,\r\n\t\tprecision: \"mediump\"\r\n\t});\r\n\trenderer.setClearColor( 0xebe5e7, 1 );\r\n\trenderer.setSize(WIDTH, HEIGHT);\r\n\trenderer.shadowMap.enabled = true;\r\n\t\r\n\tdocument.body.appendChild(renderer.domElement);\r\n\t\r\n\t\r\n\r\n\tvar geometry = new THREE.BoxGeometry(1, 1, 1);\r\n\t\r\n\tvar material = new THREE.MeshPhongMaterial({\r\n\t\tcolor: 0xff3300,\r\n\t\tspecular: 0x555555,\r\n\t\tshininess: 30\r\n\t});\r\n\tvar cube = new THREE.Mesh(geometry, material);\r\n\tscene.add(cube);\r\n\tcube.position.x = 1\r\n\r\n\tvar material2 = new THREE.MeshPhongMaterial({\r\n\t\tmap: THREE.ImageUtils.loadTexture('textures/ground.jpg')\r\n\t});\r\n\tvar cube2 = new THREE.Mesh(geometry, material2);\r\n\tscene.add(cube2);\r\n\tcube2.position.x = -1;\r\n\r\n\tvar directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\r\n\tdirectionalLight.position.set(10, 10, 10);\r\n\tscene.add(directionalLight);\r\n\r\n\twindow.addEventListener('resize', onWindowResize, false);\r\n\r\n\tcontrols = new THREE.OrbitControls(camera, renderer.domElement);\r\n\r\n\tfunction render() {\r\n\t\tcube.rotation.x += 0.05;\r\n\t\tcube.rotation.y += 0.03;\r\n\t\tcube2.rotation.x += 0.05;\r\n\t\tcube2.rotation.y += 0.03;\r\n\r\n\t\trequestAnimationFrame(render);\r\n\t\trenderer.render(scene, camera);\r\n\t}\r\n\trender();\r\n}\r\n\r\nfunction onWindowResize() {\r\n\tHEIGHT = window.innerHeight;\r\n\tWIDTH = window.innerWidth;\r\n\trenderer.setSize(WIDTH, HEIGHT);\r\n\tcamera.aspect = WIDTH / HEIGHT;\r\n\tcamera.updateProjectionMatrix();\r\n}\r\n\r\ninit();\r\n\r\n/*\r\nvar scene = new THREE.Scene();\r\nvar camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\nvar renderer = new THREE.WebGLRenderer({\r\n\tantialias: true,\r\n\tprecision: \"mediump\"\r\n});\r\n\r\ndocument.body.appendChild(renderer.domElement);\r\n\r\nwindow.addEventListener('resize', onWindowResize, false);\r\nfunction onWindowResize() {\r\n\tHEIGHT = window.innerHeight;\r\n\tWIDTH = window.innerWidth;\r\n\twindowHalfX = WIDTH / 2;\r\n\twindowHalfY = HEIGHT / 2;\r\n\trenderer.setSize(WIDTH, HEIGHT);\r\n\tcamera.aspect = WIDTH / HEIGHT;\r\n\tcamera.updateProjectionMatrix();\r\n}\r\n\r\nvar geometry = new THREE.BoxGeometry(1, 1, 1);\r\nvar material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\r\nvar cube = new THREE.Mesh(geometry, material);\r\nscene.add(cube);\r\ncamera.position.z = 5;\r\n\r\nfunction render() {\r\n\tcube.rotation.x += 0.1;\r\n\tcube.rotation.y += 0.1;\r\n\r\n\trequestAnimationFrame(render);\r\n\trenderer.render(scene, camera);\r\n}\r\nrender();\r\n*/\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/main.js\n ** module id = 0\n ** module chunks = 0\n **/","module.exports = {\r\n\tfolders: {\r\n\t\ttextures: \"textures/\"\r\n\t}\r\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/conf.js\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = function(sizeX, sizeY, blockedProb){\r\n\tsizeX = sizeX || 5;\r\n\tsizeY = sizeY || 5;\r\n\tblockedProb = blockedProb || .2\r\n\tif(sizeX < 0 || sizeY < 0 || blockedProb > .3)\r\n\t\tthrow new Error(\"Invalid size for map\");\r\n\r\n\tvar gmap = [];\r\n\r\n\t//Generate player zone\r\n\tvar housePos = Math.round(Math.random() * (sizeX - 3));\r\n\tvar aux = [];\r\n\tfor(x = 0; x < sizeX; x++){\r\n\t\taux[x] = (x == housePos + 1) ? \"Home\" : \"Imposible\";\r\n\t}\r\n\tgmap.push(aux);\r\n\r\n\t//Generate game zone\r\n\tfor(y = 0; y < sizeY; y++){\r\n\t\tvar aux = [];\r\n\t\tfor(x = 0; x < sizeX; x++){\r\n\t\t\taux[x] = (Math.random() <= blockedProb) ? \"Obstacle\" : \"Ground\";\r\n\t\t}\r\n\t\tgmap.push(aux);\r\n\t}\r\n\r\n\t//Generate spawn point\r\n\tvar spawnPos = Math.round(Math.random() * (sizeX - 3));\r\n\tvar aux = [];\r\n\tfor(x = 0; x < sizeX; x++){\r\n\t\taux[x] = (x == spawnPos + 1) ? \"Spawn\" : \"Imposible\";\r\n\t}\r\n\tgmap.push(aux);\r\n\r\n\treturn gmap;\r\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/generators/map.js\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":""}